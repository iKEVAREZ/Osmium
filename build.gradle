plugins {
	id 'java'
	
	id 'eclipse'
	id 'idea'
	
	id 'maven'
	id 'maven-publish'
	//id 'com.github.johnrengelman.shadow' version '1.2.3'
    //id 'org.spongepowered.plugin' version '0.8.1'
}

group = "com.kmecpp"
version = project_version

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    shade
    compile.extendsFrom shade
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = project_id
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = project_name
                description = project_description
                url = project_url
            }
        }
    }
    repositories {
    	maven {
    	    credentials {
    			username = project.properties.mavenUser
    			password = project.properties.mavenPassword
    		}
    		def releasesRepoUrl = "https://oss.sonatype.org/content/repositories/releases"
    		def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
    		//url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    		url = snapshotsRepoUrl //Be safe for now
        }
    }
}

/*
 * COMPILIATION
 */
processResources {
	expand(project.properties)
}

task processAppInfo(type: Copy) {
    from 'src/main/java/com/kmecpp/osmium/AppInfo.java'
    into 'build/generated/com/kmecpp/osmium/'
    expand(project.properties)
}

task compileAppInfo(type: JavaCompile, dependsOn: processAppInfo) {
    source = "build/generated"
    classpath = sourceSets.main.compileClasspath
    destinationDir = file('build/classes/java/main')
}

task mergeSources(type: Copy) {
   from 'build/generated'
   from 'src/main/java'
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
   into "build/finalSources"
}

sourceSets {
    generated {
        java.srcDir "build/finalSources"
    }
}

/*
sourceSets.main.java {
	srcDirs = ["build/finalSources"]
}

compileJava {
	exclude "com/kmecpp/osmium/AppInfo.java"
	classpath += files("build/generated")
}
*/

compileJava {
    //sourceSets.main.java { srcDir "build/finalSources" }
   	source = sourceSets.generated.java
}

compileJava.dependsOn mergeSources, compileAppInfo
/*
 * END COMPILIATION
 */

repositories {
	jcenter()
	//maven { url "http://ci.kmecpp.com/plugin/repository/everything/" }
	maven { url "http://repo.spongepowered.org/maven" }
	maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
	//maven { url "http://repo.bstats.org/content/repositories/releases/" }
}

dependencies {
	compile files("lib/spigot-1.12.2-R0.1-SNAPSHOT-b1648.jar")
	//compile "org.spigotmc:spigot:$bukkit_version"
	compile "org.spongepowered:spongeapi:$sponge_version"
	compile "org.spongepowered:spongevanilla:1.12.2-7.1.0-BETA-75"
	
	//shade "com.kmecpp:jlib:+"
	shade "com.eclipsesource.minimal-json:minimal-json:0.9.5"
	shade "org.spongepowered:configurate-hocon:3.5"
	shade "org.spongepowered:plugin-meta:0.4.1"
	shade "org.javassist:javassist:3.23.1-GA"
	//shade "org.yaml:snakeyaml:1.21"
	//shade "org.bstats:bstats-bukkit:1.2"
	//shade "org.bstats:bstats-sponge:1.2"
	shade "com.zaxxer:HikariCP:3.1.0"
	
    testCompile 'junit:junit:4.12'
}
/*
sponge {
    plugin {
        meta {
        println project_version
            name = project_name
            version = project_version
            description = project_description
            url = project_url
        }
    }
}*/

jar {
	manifest.mainAttributes(
		"Built-By": "kmecpp",
		"Implementation-Title": archivesBaseName,
		"Implementation-Version": project.version)
						
    configurations.shade.each { dep ->
    	print dep
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        /*
        	uniqueVersion = false
        	repository(url: "http://repo.spongepowered.org") {
        	}
        
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'com.kmecpp' && it.artifactId == 'osmium' }
            }

            ivy {
            	credentials {
            		username project.properties.mavenUser
            		password project.properties.mavenPassword
            	}
            	url "http://repo.kmecpp.com"
            }*/
        }
    }

}

task deploy {
	exec {
		if (project.hasProperty("bukkit_server")) {
			commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("bukkit_server") + "\\plugins", '/Y'
			//from "build/libs/"
			//into(project.getProperty("bukkit_server") + "/plugins")
		}
		if (project.hasProperty("sponge_server")) {
			commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("sponge_server") + "\\mods", '/Y'
			//from "build/libs/"
			//into(project.getProperty("sponge_server") + "/mods")
		}
	}
}


build.finalizedBy deploy
