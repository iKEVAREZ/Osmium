import org.apache.tools.ant.filters.*

plugins {
    id 'java'

    id 'eclipse'
    id 'idea'

    id 'maven'
    id 'maven-publish'   
    id 'signing'
    //id 'org.spongepowered.plugin' version '0.8.1'
}


group = "com.kmecpp"
version = project_version

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
        	groupId = 'com.kmecpp'
            artifactId = 'osmium'
            version = project_version

            from components.java
        }
    }
    repositories {
    	maven {
    		url = "http://repo.kmecpp.com"
    		credentials {
    			username project.properties.mavenUser
    			password project.properties.mavenPassword
    		}
    	}
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

/*
 * COMPILIATION
 */
processResources {
	expand(project.properties)
}

task processAppInfo(type: Copy) {
    from 'src/main/java/com/kmecpp/osmium/AppInfo.java'
    into 'build/generated/com/kmecpp/osmium/'
    expand(project.properties)
}

task compileAppInfo(type: JavaCompile, dependsOn: processAppInfo) {
    source = "build/generated"
    classpath = sourceSets.main.compileClasspath
    destinationDir = file('build/classes/java/main')
}

task mergeSources(type: Copy) {
   from 'build/generated'
   from 'src/main/java'
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
   into "build/finalSources"
}

sourceSets {
    generated {
        java.srcDir "build/finalSources"
    }
}

/*
sourceSets.main.java {
	srcDirs = ["build/finalSources"]
}

compileJava {
	exclude "com/kmecpp/osmium/AppInfo.java"
	classpath += files("build/generated")
}
*/

compileJava {
    //sourceSets.main.java { srcDir "build/finalSources" }
   	source = sourceSets.generated.java
}

compileJava.dependsOn mergeSources, compileAppInfo
/*
 * END COMPILIATION
 */

repositories {
    jcenter()
    maven { url "http://repo.kmecpp.com" }
    maven { url "http://repo.spongepowered.org/maven" }
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
}

dependencies {
	compile files("lib/spigot-1.12.2-R0.1-SNAPSHOT-b1648.jar")
	//compile "org.spigotmc:spigot:$bukkit_version"
	compile "org.spongepowered:spongeapi:$sponge_version"
	
	shade "com.kmecpp:jlib:+"
	shade "org.spongepowered:plugin-meta:0.4.1"
	shade "org.spongepowered:configurate-hocon:3.6-SNAPSHOT"
	shade "javassist:javassist:3.12.1.GA"
	shade "com.zaxxer:HikariCP:+"

    testCompile 'junit:junit:4.12'
}
/*
sponge {
    plugin {
        meta {
        println project_version
            name = project_name
            version = project_version
            description = project_description
            url = project_url
        }
    }
}*/

jar {
	manifest.mainAttributes(
		"Built-By": "kmecpp",
		"Implementation-Title": archivesBaseName,
		"Implementation-Version": project.version)
						
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
        /*
        	uniqueVersion = false
        	repository(url: "http://repo.spongepowered.org") {
        	}
        
            pom.whenConfigured {
                pom -> pom.dependencies.removeAll { it.groupId == 'com.kmecpp' && it.artifactId == 'osmium' }
            }

            ivy {
            	credentials {
            		username project.properties.mavenUser
            		password project.properties.mavenPassword
            	}
            	url "http://repo.kmecpp.com"
            }*/
        }
    }

}

task deployBukkit(type: Exec) {
	if (project.hasProperty("bukkit_server")) {
		println jar.archiveName
		println project.getProperty("bukkit_server") + "\\plugins"
		commandLine 'cmd', '/c', 'copy', jar.archivePath, project.getProperty("bukkit_server") + "\\plugins", '/Y'
		//from "build/libs/"
		//into(project.getProperty("bukkit_server") + "/plugins")
	}
}

task deploySponge(type: Copy) {
	if (project.hasProperty("sponge_server")) {
		from "build/libs/"
		into(project.getProperty("sponge_server") + "/mods")
	}
}

build.finalizedBy deployBukkit
build.finalizedBy deploySponge